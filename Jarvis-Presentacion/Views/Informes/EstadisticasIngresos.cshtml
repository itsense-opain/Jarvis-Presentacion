
@{
    ViewData["Title"] = "Ingresos";
}

<h1>Informes</h1>

<div class="menu__informes">
    <ul class="nav nav-tabs d-flex flex-wrap">
        <li class="nav-item">
            <a href="" class="nav-link">Infrasa</a>
        </li>
        <li class="nav-item">
            <a href="" class="nav-link">
                Cobro
            </a>
        </li>
        <li class="nav-item dropdown">
            <a href="" class="nav-link dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                Anexos
            </a>
            <div class="dropdown-menu">
                <a href="" class="dropdown-item">Tasas</a>
                <div class="dropdown-divider"></div>
                <a href="" class="dropdown-item">Parqueo</a>
                <div class="dropdown-divider"></div>
                <a href="" class="dropdown-item">GPU</a>
                <div class="dropdown-divider"></div>
                <div class="dropdown-item">Fuentes</div>

                <ul>
                    <li>
                        <a href="" class="dropdown-item">Aerocivil</a>
                    </li>
                    <li>
                        <a href="" class="dropdown-item">Parqueo</a>
                    </li>
                    <li>
                        <a href="" class="dropdown-item">Fuentes</a>
                    </li>
                    <li>
                        <a href="" class="dropdown-item">GPU</a>
                    </li>
                </ul>


            </div>
        </li>
        <li class="nav-item dropdown">
            <a href="" class="nav-link dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                Facturas
            </a>
            <div class="dropdown-menu">
                <a href="" class="dropdown-item">Fiducia</a>
                <div class="dropdown-divider"></div>
                <a href="" class="dropdown-item">Número de factura</a>
                <div class="dropdown-divider"></div>
                <a href="" class="dropdown-item">Pagar por <img src="~/images/logo-pse.png" alt="Pago por PSE" class="img-fluid" /></a>
            </div>
        </li>

        <li class="nav-item dropdown">
            <a href="" class="nav-link dropdown-toggle active"  data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                Estadísticas
            </a>
            <div class="dropdown-menu">
                <div class="dropdown-item">
                    Actividad de usuarios
                </div>
                <ul>
                    <li><a href="./estadisticasingresos" class="dropdown-item">Ingresos</a></li>
                    <li><a href="./estadisticasCargueArchivos" class="dropdown-item">Cargue de archivos</a></li>
                    <li><a href="./estadisticasHorasIngreso" class="dropdown-item">Horas de ingresos</a></li>
                </ul>

                <div class="dropdown-divider"></div>
                <div class="dropdown-item">
                    Actividad de aerolíneas
                </div>
                <ul>
                    <li><a href="./estadisticasCantidadVuelos" class="dropdown-item">Cantidad de vuelos</a></li>
                    <li><a href="./estadisticasCantidadPasajeros" class="dropdown-item">Cantidad de pasajeros</a></li>
                    <li><a href="./estadisticasCantidadTransitos" class="dropdown-item">Cantidad de tránsitos</a></li>
                    <li><a href="./estadisticasDestinos" class="dropdown-item">Destinos</a></li>
                </ul>
            </div>
        </li>
    </ul>
</div>

<div class="sin__contenido mb-5">
    <div class="bg--white">
        <div class="row">
            <div class="col-sm-3 pt-2">
                Seleccione las fechas:
            </div>
            <div class="col-sm-9">
                <form class="needs-validation" novalidate>
                    <div class="form-inline float-right">
                        <div class="form-group  search__date--width">
                            <img src="~/images/novedad-calendario.png" alt="" />
                            <input id="startDate" class="text-center" placeholder="Fecha inicial" aria-describedby="validationTooltipUsernamePrepend" required /> - <input id="endDate" class="text-center" placeholder="Fecha final" aria-describedby="validationTooltipUsernamePrepend" required />
                            <div class="invalid-tooltip">
                                Por favor escriba o seleccione una fecha valida
                            </div>
                            <button type="button" class="btn btn--border ml-2">Buscar</button>
                        </div>

                    </div>
                </form>
            </div>
        </div>
        <hr />
        <div>
            <p id="chart">
                <div class="text-right">Total de ingresos: <strong>115</strong></div>
        </div>
    </div>
</div>



<script type="text/javascript" src="https://d3js.org/d3.v3.min.js"></script>
<script type="text/javascript">



    //////////////////////////////////////

    var margin = { top: 55, right: 0, bottom: 0, left: 0 },
        width = 1070,
        height = 500 - margin.top - margin.bottom,
        formatNumber = d3.format(",d"),
        transitioning;

    var x = d3.scale.linear()
        .domain([0, width])
        .range([0, width]);

    var y = d3.scale.linear()
        .domain([0, height])
        .range([0, height]);

    var treemap = d3.layout.treemap()
        .children(function (d, depth) { return depth ? null : d._children; })
        .sort(function (a, b) { return a.value - b.value; })
        .ratio(height / width * 0.5 * (1 + Math.sqrt(5)))
        .round(false);

    var svg = d3.select("#chart").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.bottom + margin.top)
        .style("margin-left", -margin.left + "px")
        .style("margin-right", -margin.right + "px")
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
        .style("shape-rendering", "crispEdges");

    var grandparent = svg.append("g")
        .attr("class", "grandparent");

    grandparent.append("rect")
        .attr("y", "-55px")
        .attr("width", width)
        .attr("height", "55px");

    grandparent.append("text")
        .attr("x", 6)
        .attr("y", 6 - margin.top)
        .attr("dy", "25px");


    d3.json("https://codepen.io/boars/pen/7958d57f25d20fae4e606732adbccf73.js", function (root) {
        initialize(root);
        accumulate(root);
        layout(root);
        display(root);

        function initialize(root) {
            root.x = root.y = 0;
            root.dx = width;
            root.dy = height;
            root.depth = 0;
        }

        // Aggregate the values for internal nodes. This is normally done by the
        // treemap layout, but not here because of our custom implementation.
        // We also take a snapshot of the original children (_children) to avoid
        // the children being overwritten when when layout is computed.
        function accumulate(d) {
            return (d._children = d.children)
                ? d.value = d.children.reduce(function (p, v) { return p + accumulate(v); }, 0)
                : d.value;
        }

        // Compute the treemap layout recursively such that each group of siblings
        // uses the same size (1×1) rather than the dimensions of the parent cell.
        // This optimizes the layout for the current zoom state. Note that a wrapper
        // object is created for the parent node for each group of siblings so that
        // the parent’s dimensions are not discarded as we recurse. Since each group
        // of sibling was laid out in 1×1, we must rescale to fit using absolute
        // coordinates. This lets us use a viewport to zoom.
        function layout(d) {
            if (d._children) {
                treemap.nodes({ _children: d._children });
                d._children.forEach(function (c) {
                    c.x = d.x + c.x * d.dx;
                    c.y = d.y + c.y * d.dy;
                    c.dx *= d.dx;
                    c.dy *= d.dy;
                    c.parent = d;
                    layout(c);
                });
            }
        }

        function display(d) {
            grandparent
                .datum(d.parent)
                .on("click", transition)
                .select("text")
                .text(name(d));

            var g1 = svg.insert("g", ".grandparent")
                .datum(d)
                .attr("class", "depth");

            var g = g1.selectAll("g")
                .data(d._children)
                .enter().append("g");

            g.filter(function (d) { return d._children; })
                .classed("children", true)
                .on("click", transition);

            g.selectAll(".child")
                .data(function (d) { return d._children || [d]; })
                .enter().append("rect")
                .attr("class", "child")
                .call(rect);

            g.append("rect")
                .attr("class", "parent")
                .call(rect)
                .append("title")
                .text(function (d) { return formatNumber(d.value); });

            g.append("text")
                .attr("dy", "25px")
                .style("font-weight", "bold")
                .text(function (d) { return d.name; })
                .call(text);

            function transition(d) {
                if (transitioning || !d) return;
                transitioning = true;

                var g2 = display(d),
                    t1 = g1.transition().duration(750),
                    t2 = g2.transition().duration(750);

                // Update the domain only after entering new elements.
                x.domain([d.x, d.x + d.dx]);
                y.domain([d.y, d.y + d.dy]);

                // Enable anti-aliasing during the transition.
                svg.style("shape-rendering", null);

                // Draw child nodes on top of parent nodes.
                svg.selectAll(".depth").sort(function (a, b) { return a.depth - b.depth; });

                // Fade-in entering text.
                g2.selectAll("text").style("fill-opacity", 0);

                // Transition to the new view.
                t1.selectAll("text").call(text).style("fill-opacity", 0);
                t2.selectAll("text").call(text).style("fill-opacity", 1);
                t1.selectAll("rect").call(rect);
                t2.selectAll("rect").call(rect);

                // Remove the old node when the transition is finished.
                t1.remove().each("end", function () {
                    svg.style("shape-rendering", "crispEdges");
                    transitioning = false;
                });
            }

            return g;
        }

        function text(text) {
            text.attr("x", function (d) { return x(d.x) + 6; })
                .attr("y", function (d) { return y(d.y) + 6; });
        }

        function rect(rect) {
            rect.attr("x", function (d) { return x(d.x); })
                .attr("y", function (d) { return y(d.y); })
                .attr("width", function (d) { return x(d.x + d.dx) - x(d.x); })
                .attr("height", function (d) { return y(d.y + d.dy) - y(d.y); });
        }

        function name(d) {
            return d.parent
                ? name(d.parent) + " > " + d.name
                : d.name;
        }
    });

</script>


